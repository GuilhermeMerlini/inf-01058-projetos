// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/06/2024 12:12:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Projeto
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Projeto_vlg_sample_tst(
	clk,
	clk_in,
	res,
	run_step,
	step,
	sampler_tx
);
input  clk;
input  clk_in;
input  res;
input  run_step;
input  step;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clk_in or res or run_step or step)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Projeto_vlg_check_tst (
	AC,
	ACdisplay0,
	ACdisplay1,
	ADD,
	AND,
	carga_AC,
	carga_NZ,
	carga_PC,
	carga_RDM,
	carga_REM,
	carga_RI,
	goto_t0,
	HLT,
	incrementa_PC,
	JMP,
	JN,
	JZ,
	LDA,
	N,
	NOP,
	NOT,
	OR,
	PC_out,
	PCdisplay0,
	PCdisplay1,
	RDM_out,
	read,
	ROM_out,
	sel,
	STA,
	ULA_out,
	ULAADD,
	ULAAND,
	ULANOT,
	ULAOR,
	ULAy,
	write,
	Z,
	sampler_rx
);
input [7:0] AC;
input [6:0] ACdisplay0;
input [6:0] ACdisplay1;
input  ADD;
input  AND;
input  carga_AC;
input  carga_NZ;
input  carga_PC;
input  carga_RDM;
input  carga_REM;
input  carga_RI;
input  goto_t0;
input  HLT;
input  incrementa_PC;
input  JMP;
input  JN;
input  JZ;
input  LDA;
input  N;
input  NOP;
input  NOT;
input  OR;
input [7:0] PC_out;
input [6:0] PCdisplay0;
input [6:0] PCdisplay1;
input [7:0] RDM_out;
input  read;
input [7:0] ROM_out;
input  sel;
input  STA;
input [7:0] ULA_out;
input  ULAADD;
input  ULAAND;
input  ULANOT;
input  ULAOR;
input  ULAy;
input  write;
input  Z;
input sampler_rx;

reg [7:0] AC_expected;
reg [6:0] ACdisplay0_expected;
reg [6:0] ACdisplay1_expected;
reg  ADD_expected;
reg  AND_expected;
reg  carga_AC_expected;
reg  carga_NZ_expected;
reg  carga_PC_expected;
reg  carga_RDM_expected;
reg  carga_REM_expected;
reg  carga_RI_expected;
reg  goto_t0_expected;
reg  HLT_expected;
reg  incrementa_PC_expected;
reg  JMP_expected;
reg  JN_expected;
reg  JZ_expected;
reg  LDA_expected;
reg  N_expected;
reg  NOP_expected;
reg  NOT_expected;
reg  OR_expected;
reg [7:0] PC_out_expected;
reg [6:0] PCdisplay0_expected;
reg [6:0] PCdisplay1_expected;
reg [7:0] RDM_out_expected;
reg  read_expected;
reg [7:0] ROM_out_expected;
reg  sel_expected;
reg  STA_expected;
reg [7:0] ULA_out_expected;
reg  ULAADD_expected;
reg  ULAAND_expected;
reg  ULANOT_expected;
reg  ULAOR_expected;
reg  ULAy_expected;
reg  write_expected;
reg  Z_expected;

reg [7:0] AC_prev;
reg [6:0] ACdisplay0_prev;
reg [6:0] ACdisplay1_prev;
reg  ADD_prev;
reg  AND_prev;
reg  carga_AC_prev;
reg  carga_NZ_prev;
reg  carga_PC_prev;
reg  carga_RDM_prev;
reg  carga_REM_prev;
reg  carga_RI_prev;
reg  goto_t0_prev;
reg  HLT_prev;
reg  incrementa_PC_prev;
reg  JMP_prev;
reg  JN_prev;
reg  JZ_prev;
reg  LDA_prev;
reg  N_prev;
reg  NOP_prev;
reg  NOT_prev;
reg  OR_prev;
reg [7:0] PC_out_prev;
reg [6:0] PCdisplay0_prev;
reg [6:0] PCdisplay1_prev;
reg [7:0] RDM_out_prev;
reg  read_prev;
reg [7:0] ROM_out_prev;
reg  sel_prev;
reg  STA_prev;
reg [7:0] ULA_out_prev;
reg  ULAADD_prev;
reg  ULAAND_prev;
reg  ULANOT_prev;
reg  ULAOR_prev;
reg  ULAy_prev;
reg  write_prev;
reg  Z_prev;

reg [7:0] AC_expected_prev;
reg  ADD_expected_prev;
reg  AND_expected_prev;
reg  carga_AC_expected_prev;
reg  carga_NZ_expected_prev;
reg  carga_PC_expected_prev;
reg  carga_RDM_expected_prev;
reg  carga_REM_expected_prev;
reg  carga_RI_expected_prev;
reg  goto_t0_expected_prev;
reg  HLT_expected_prev;
reg  incrementa_PC_expected_prev;
reg  JMP_expected_prev;
reg  JN_expected_prev;
reg  JZ_expected_prev;
reg  LDA_expected_prev;
reg  N_expected_prev;
reg  NOP_expected_prev;
reg  NOT_expected_prev;
reg  OR_expected_prev;
reg [7:0] PC_out_expected_prev;
reg [7:0] RDM_out_expected_prev;
reg  read_expected_prev;
reg [7:0] ROM_out_expected_prev;
reg  sel_expected_prev;
reg  STA_expected_prev;
reg [7:0] ULA_out_expected_prev;
reg  ULAADD_expected_prev;
reg  ULAAND_expected_prev;
reg  ULANOT_expected_prev;
reg  ULAOR_expected_prev;
reg  ULAy_expected_prev;
reg  write_expected_prev;
reg  Z_expected_prev;

reg [7:0] last_AC_exp;
reg  last_ADD_exp;
reg  last_AND_exp;
reg  last_carga_AC_exp;
reg  last_carga_NZ_exp;
reg  last_carga_PC_exp;
reg  last_carga_RDM_exp;
reg  last_carga_REM_exp;
reg  last_carga_RI_exp;
reg  last_goto_t0_exp;
reg  last_HLT_exp;
reg  last_incrementa_PC_exp;
reg  last_JMP_exp;
reg  last_JN_exp;
reg  last_JZ_exp;
reg  last_LDA_exp;
reg  last_N_exp;
reg  last_NOP_exp;
reg  last_NOT_exp;
reg  last_OR_exp;
reg [7:0] last_PC_out_exp;
reg [7:0] last_RDM_out_exp;
reg  last_read_exp;
reg [7:0] last_ROM_out_exp;
reg  last_sel_exp;
reg  last_STA_exp;
reg [7:0] last_ULA_out_exp;
reg  last_ULAADD_exp;
reg  last_ULAAND_exp;
reg  last_ULANOT_exp;
reg  last_ULAOR_exp;
reg  last_ULAy_exp;
reg  last_write_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:38] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 38'b1;
end

// update real /o prevs

always @(trigger)
begin
	AC_prev = AC;
	ACdisplay0_prev = ACdisplay0;
	ACdisplay1_prev = ACdisplay1;
	ADD_prev = ADD;
	AND_prev = AND;
	carga_AC_prev = carga_AC;
	carga_NZ_prev = carga_NZ;
	carga_PC_prev = carga_PC;
	carga_RDM_prev = carga_RDM;
	carga_REM_prev = carga_REM;
	carga_RI_prev = carga_RI;
	goto_t0_prev = goto_t0;
	HLT_prev = HLT;
	incrementa_PC_prev = incrementa_PC;
	JMP_prev = JMP;
	JN_prev = JN;
	JZ_prev = JZ;
	LDA_prev = LDA;
	N_prev = N;
	NOP_prev = NOP;
	NOT_prev = NOT;
	OR_prev = OR;
	PC_out_prev = PC_out;
	PCdisplay0_prev = PCdisplay0;
	PCdisplay1_prev = PCdisplay1;
	RDM_out_prev = RDM_out;
	read_prev = read;
	ROM_out_prev = ROM_out;
	sel_prev = sel;
	STA_prev = STA;
	ULA_out_prev = ULA_out;
	ULAADD_prev = ULAADD;
	ULAAND_prev = ULAAND;
	ULANOT_prev = ULANOT;
	ULAOR_prev = ULAOR;
	ULAy_prev = ULAy;
	write_prev = write;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	AC_expected_prev = AC_expected;
	ADD_expected_prev = ADD_expected;
	AND_expected_prev = AND_expected;
	carga_AC_expected_prev = carga_AC_expected;
	carga_NZ_expected_prev = carga_NZ_expected;
	carga_PC_expected_prev = carga_PC_expected;
	carga_RDM_expected_prev = carga_RDM_expected;
	carga_REM_expected_prev = carga_REM_expected;
	carga_RI_expected_prev = carga_RI_expected;
	goto_t0_expected_prev = goto_t0_expected;
	HLT_expected_prev = HLT_expected;
	incrementa_PC_expected_prev = incrementa_PC_expected;
	JMP_expected_prev = JMP_expected;
	JN_expected_prev = JN_expected;
	JZ_expected_prev = JZ_expected;
	LDA_expected_prev = LDA_expected;
	N_expected_prev = N_expected;
	NOP_expected_prev = NOP_expected;
	NOT_expected_prev = NOT_expected;
	OR_expected_prev = OR_expected;
	PC_out_expected_prev = PC_out_expected;
	RDM_out_expected_prev = RDM_out_expected;
	read_expected_prev = read_expected;
	ROM_out_expected_prev = ROM_out_expected;
	sel_expected_prev = sel_expected;
	STA_expected_prev = STA_expected;
	ULA_out_expected_prev = ULA_out_expected;
	ULAADD_expected_prev = ULAADD_expected;
	ULAAND_expected_prev = ULAAND_expected;
	ULANOT_expected_prev = ULANOT_expected;
	ULAOR_expected_prev = ULAOR_expected;
	ULAy_expected_prev = ULAy_expected;
	write_expected_prev = write_expected;
	Z_expected_prev = Z_expected;
end


// expected AC[ 7 ]
initial
begin
	AC_expected[7] = 1'bX;
end 
// expected AC[ 6 ]
initial
begin
	AC_expected[6] = 1'bX;
end 
// expected AC[ 5 ]
initial
begin
	AC_expected[5] = 1'bX;
end 
// expected AC[ 4 ]
initial
begin
	AC_expected[4] = 1'bX;
end 
// expected AC[ 3 ]
initial
begin
	AC_expected[3] = 1'bX;
end 
// expected AC[ 2 ]
initial
begin
	AC_expected[2] = 1'bX;
end 
// expected AC[ 1 ]
initial
begin
	AC_expected[1] = 1'bX;
end 
// expected AC[ 0 ]
initial
begin
	AC_expected[0] = 1'bX;
end 
// expected PC_out[ 7 ]
initial
begin
	PC_out_expected[7] = 1'bX;
end 
// expected PC_out[ 6 ]
initial
begin
	PC_out_expected[6] = 1'bX;
end 
// expected PC_out[ 5 ]
initial
begin
	PC_out_expected[5] = 1'bX;
end 
// expected PC_out[ 4 ]
initial
begin
	PC_out_expected[4] = 1'bX;
end 
// expected PC_out[ 3 ]
initial
begin
	PC_out_expected[3] = 1'bX;
end 
// expected PC_out[ 2 ]
initial
begin
	PC_out_expected[2] = 1'bX;
end 
// expected PC_out[ 1 ]
initial
begin
	PC_out_expected[1] = 1'bX;
end 
// expected PC_out[ 0 ]
initial
begin
	PC_out_expected[0] = 1'bX;
end 
// expected RDM_out[ 7 ]
initial
begin
	RDM_out_expected[7] = 1'bX;
end 
// expected RDM_out[ 6 ]
initial
begin
	RDM_out_expected[6] = 1'bX;
end 
// expected RDM_out[ 5 ]
initial
begin
	RDM_out_expected[5] = 1'bX;
end 
// expected RDM_out[ 4 ]
initial
begin
	RDM_out_expected[4] = 1'bX;
end 
// expected RDM_out[ 3 ]
initial
begin
	RDM_out_expected[3] = 1'bX;
end 
// expected RDM_out[ 2 ]
initial
begin
	RDM_out_expected[2] = 1'bX;
end 
// expected RDM_out[ 1 ]
initial
begin
	RDM_out_expected[1] = 1'bX;
end 
// expected RDM_out[ 0 ]
initial
begin
	RDM_out_expected[0] = 1'bX;
end 
// expected ULA_out[ 7 ]
initial
begin
	ULA_out_expected[7] = 1'bX;
end 
// expected ULA_out[ 6 ]
initial
begin
	ULA_out_expected[6] = 1'bX;
end 
// expected ULA_out[ 5 ]
initial
begin
	ULA_out_expected[5] = 1'bX;
end 
// expected ULA_out[ 4 ]
initial
begin
	ULA_out_expected[4] = 1'bX;
end 
// expected ULA_out[ 3 ]
initial
begin
	ULA_out_expected[3] = 1'bX;
end 
// expected ULA_out[ 2 ]
initial
begin
	ULA_out_expected[2] = 1'bX;
end 
// expected ULA_out[ 1 ]
initial
begin
	ULA_out_expected[1] = 1'bX;
end 
// expected ULA_out[ 0 ]
initial
begin
	ULA_out_expected[0] = 1'bX;
end 
// expected ROM_out[ 7 ]
initial
begin
	ROM_out_expected[7] = 1'bX;
end 
// expected ROM_out[ 6 ]
initial
begin
	ROM_out_expected[6] = 1'bX;
end 
// expected ROM_out[ 5 ]
initial
begin
	ROM_out_expected[5] = 1'bX;
end 
// expected ROM_out[ 4 ]
initial
begin
	ROM_out_expected[4] = 1'bX;
end 
// expected ROM_out[ 3 ]
initial
begin
	ROM_out_expected[3] = 1'bX;
end 
// expected ROM_out[ 2 ]
initial
begin
	ROM_out_expected[2] = 1'bX;
end 
// expected ROM_out[ 1 ]
initial
begin
	ROM_out_expected[1] = 1'bX;
end 
// expected ROM_out[ 0 ]
initial
begin
	ROM_out_expected[0] = 1'bX;
end 

// expected NOP
initial
begin
	NOP_expected = 1'bX;
end 

// expected STA
initial
begin
	STA_expected = 1'bX;
end 

// expected LDA
initial
begin
	LDA_expected = 1'bX;
end 

// expected ADD
initial
begin
	ADD_expected = 1'bX;
end 

// expected OR
initial
begin
	OR_expected = 1'bX;
end 

// expected AND
initial
begin
	AND_expected = 1'bX;
end 

// expected NOT
initial
begin
	NOT_expected = 1'bX;
end 

// expected JMP
initial
begin
	JMP_expected = 1'bX;
end 

// expected JN
initial
begin
	JN_expected = 1'bX;
end 

// expected JZ
initial
begin
	JZ_expected = 1'bX;
end 

// expected N
initial
begin
	N_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 

// expected HLT
initial
begin
	HLT_expected = 1'bX;
end 

// expected carga_AC
initial
begin
	carga_AC_expected = 1'bX;
end 

// expected carga_NZ
initial
begin
	carga_NZ_expected = 1'bX;
end 

// expected carga_PC
initial
begin
	carga_PC_expected = 1'bX;
end 

// expected carga_RDM
initial
begin
	carga_RDM_expected = 1'bX;
end 

// expected carga_REM
initial
begin
	carga_REM_expected = 1'bX;
end 

// expected carga_RI
initial
begin
	carga_RI_expected = 1'bX;
end 

// expected goto_t0
initial
begin
	goto_t0_expected = 1'bX;
end 

// expected incrementa_PC
initial
begin
	incrementa_PC_expected = 1'bX;
end 

// expected read
initial
begin
	read_expected = 1'bX;
end 

// expected sel
initial
begin
	sel_expected = 1'bX;
end 

// expected ULAADD
initial
begin
	ULAADD_expected = 1'bX;
end 

// expected ULAOR
initial
begin
	ULAOR_expected = 1'bX;
end 

// expected ULAAND
initial
begin
	ULAAND_expected = 1'bX;
end 

// expected ULANOT
initial
begin
	ULANOT_expected = 1'bX;
end 

// expected ULAy
initial
begin
	ULAy_expected = 1'bX;
end 

// expected write
initial
begin
	write_expected = 1'bX;
end 
// generate trigger
always @(AC_expected or AC or ACdisplay0_expected or ACdisplay0 or ACdisplay1_expected or ACdisplay1 or ADD_expected or ADD or AND_expected or AND or carga_AC_expected or carga_AC or carga_NZ_expected or carga_NZ or carga_PC_expected or carga_PC or carga_RDM_expected or carga_RDM or carga_REM_expected or carga_REM or carga_RI_expected or carga_RI or goto_t0_expected or goto_t0 or HLT_expected or HLT or incrementa_PC_expected or incrementa_PC or JMP_expected or JMP or JN_expected or JN or JZ_expected or JZ or LDA_expected or LDA or N_expected or N or NOP_expected or NOP or NOT_expected or NOT or OR_expected or OR or PC_out_expected or PC_out or PCdisplay0_expected or PCdisplay0 or PCdisplay1_expected or PCdisplay1 or RDM_out_expected or RDM_out or read_expected or read or ROM_out_expected or ROM_out or sel_expected or sel or STA_expected or STA or ULA_out_expected or ULA_out or ULAADD_expected or ULAADD or ULAAND_expected or ULAAND or ULANOT_expected or ULANOT or ULAOR_expected or ULAOR or ULAy_expected or ULAy or write_expected or write or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AC = %b | expected ACdisplay0 = %b | expected ACdisplay1 = %b | expected ADD = %b | expected AND = %b | expected carga_AC = %b | expected carga_NZ = %b | expected carga_PC = %b | expected carga_RDM = %b | expected carga_REM = %b | expected carga_RI = %b | expected goto_t0 = %b | expected HLT = %b | expected incrementa_PC = %b | expected JMP = %b | expected JN = %b | expected JZ = %b | expected LDA = %b | expected N = %b | expected NOP = %b | expected NOT = %b | expected OR = %b | expected PC_out = %b | expected PCdisplay0 = %b | expected PCdisplay1 = %b | expected RDM_out = %b | expected read = %b | expected ROM_out = %b | expected sel = %b | expected STA = %b | expected ULA_out = %b | expected ULAADD = %b | expected ULAAND = %b | expected ULANOT = %b | expected ULAOR = %b | expected ULAy = %b | expected write = %b | expected Z = %b | ",AC_expected_prev,ACdisplay0_expected_prev,ACdisplay1_expected_prev,ADD_expected_prev,AND_expected_prev,carga_AC_expected_prev,carga_NZ_expected_prev,carga_PC_expected_prev,carga_RDM_expected_prev,carga_REM_expected_prev,carga_RI_expected_prev,goto_t0_expected_prev,HLT_expected_prev,incrementa_PC_expected_prev,JMP_expected_prev,JN_expected_prev,JZ_expected_prev,LDA_expected_prev,N_expected_prev,NOP_expected_prev,NOT_expected_prev,OR_expected_prev,PC_out_expected_prev,PCdisplay0_expected_prev,PCdisplay1_expected_prev,RDM_out_expected_prev,read_expected_prev,ROM_out_expected_prev,sel_expected_prev,STA_expected_prev,ULA_out_expected_prev,ULAADD_expected_prev,ULAAND_expected_prev,ULANOT_expected_prev,ULAOR_expected_prev,ULAy_expected_prev,write_expected_prev,Z_expected_prev);
	$display("| real AC = %b | real ACdisplay0 = %b | real ACdisplay1 = %b | real ADD = %b | real AND = %b | real carga_AC = %b | real carga_NZ = %b | real carga_PC = %b | real carga_RDM = %b | real carga_REM = %b | real carga_RI = %b | real goto_t0 = %b | real HLT = %b | real incrementa_PC = %b | real JMP = %b | real JN = %b | real JZ = %b | real LDA = %b | real N = %b | real NOP = %b | real NOT = %b | real OR = %b | real PC_out = %b | real PCdisplay0 = %b | real PCdisplay1 = %b | real RDM_out = %b | real read = %b | real ROM_out = %b | real sel = %b | real STA = %b | real ULA_out = %b | real ULAADD = %b | real ULAAND = %b | real ULANOT = %b | real ULAOR = %b | real ULAy = %b | real write = %b | real Z = %b | ",AC_prev,ACdisplay0_prev,ACdisplay1_prev,ADD_prev,AND_prev,carga_AC_prev,carga_NZ_prev,carga_PC_prev,carga_RDM_prev,carga_REM_prev,carga_RI_prev,goto_t0_prev,HLT_prev,incrementa_PC_prev,JMP_prev,JN_prev,JZ_prev,LDA_prev,N_prev,NOP_prev,NOT_prev,OR_prev,PC_out_prev,PCdisplay0_prev,PCdisplay1_prev,RDM_out_prev,read_prev,ROM_out_prev,sel_prev,STA_prev,ULA_out_prev,ULAADD_prev,ULAAND_prev,ULANOT_prev,ULAOR_prev,ULAy_prev,write_prev,Z_prev);
`endif
	if (
		( AC_expected_prev[0] !== 1'bx ) && ( AC_prev[0] !== AC_expected_prev[0] )
		&& ((AC_expected_prev[0] !== last_AC_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp[0] = AC_expected_prev[0];
	end
	if (
		( AC_expected_prev[1] !== 1'bx ) && ( AC_prev[1] !== AC_expected_prev[1] )
		&& ((AC_expected_prev[1] !== last_AC_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp[1] = AC_expected_prev[1];
	end
	if (
		( AC_expected_prev[2] !== 1'bx ) && ( AC_prev[2] !== AC_expected_prev[2] )
		&& ((AC_expected_prev[2] !== last_AC_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp[2] = AC_expected_prev[2];
	end
	if (
		( AC_expected_prev[3] !== 1'bx ) && ( AC_prev[3] !== AC_expected_prev[3] )
		&& ((AC_expected_prev[3] !== last_AC_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp[3] = AC_expected_prev[3];
	end
	if (
		( AC_expected_prev[4] !== 1'bx ) && ( AC_prev[4] !== AC_expected_prev[4] )
		&& ((AC_expected_prev[4] !== last_AC_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp[4] = AC_expected_prev[4];
	end
	if (
		( AC_expected_prev[5] !== 1'bx ) && ( AC_prev[5] !== AC_expected_prev[5] )
		&& ((AC_expected_prev[5] !== last_AC_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp[5] = AC_expected_prev[5];
	end
	if (
		( AC_expected_prev[6] !== 1'bx ) && ( AC_prev[6] !== AC_expected_prev[6] )
		&& ((AC_expected_prev[6] !== last_AC_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp[6] = AC_expected_prev[6];
	end
	if (
		( AC_expected_prev[7] !== 1'bx ) && ( AC_prev[7] !== AC_expected_prev[7] )
		&& ((AC_expected_prev[7] !== last_AC_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp[7] = AC_expected_prev[7];
	end
	if (
		( ADD_expected_prev !== 1'bx ) && ( ADD_prev !== ADD_expected_prev )
		&& ((ADD_expected_prev !== last_ADD_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADD_expected_prev);
		$display ("     Real value = %b", ADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ADD_exp = ADD_expected_prev;
	end
	if (
		( AND_expected_prev !== 1'bx ) && ( AND_prev !== AND_expected_prev )
		&& ((AND_expected_prev !== last_AND_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AND_expected_prev);
		$display ("     Real value = %b", AND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_AND_exp = AND_expected_prev;
	end
	if (
		( carga_AC_expected_prev !== 1'bx ) && ( carga_AC_prev !== carga_AC_expected_prev )
		&& ((carga_AC_expected_prev !== last_carga_AC_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_AC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_AC_expected_prev);
		$display ("     Real value = %b", carga_AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_carga_AC_exp = carga_AC_expected_prev;
	end
	if (
		( carga_NZ_expected_prev !== 1'bx ) && ( carga_NZ_prev !== carga_NZ_expected_prev )
		&& ((carga_NZ_expected_prev !== last_carga_NZ_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_NZ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_NZ_expected_prev);
		$display ("     Real value = %b", carga_NZ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_carga_NZ_exp = carga_NZ_expected_prev;
	end
	if (
		( carga_PC_expected_prev !== 1'bx ) && ( carga_PC_prev !== carga_PC_expected_prev )
		&& ((carga_PC_expected_prev !== last_carga_PC_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_PC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_PC_expected_prev);
		$display ("     Real value = %b", carga_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_carga_PC_exp = carga_PC_expected_prev;
	end
	if (
		( carga_RDM_expected_prev !== 1'bx ) && ( carga_RDM_prev !== carga_RDM_expected_prev )
		&& ((carga_RDM_expected_prev !== last_carga_RDM_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_RDM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_RDM_expected_prev);
		$display ("     Real value = %b", carga_RDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_carga_RDM_exp = carga_RDM_expected_prev;
	end
	if (
		( carga_REM_expected_prev !== 1'bx ) && ( carga_REM_prev !== carga_REM_expected_prev )
		&& ((carga_REM_expected_prev !== last_carga_REM_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_REM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_REM_expected_prev);
		$display ("     Real value = %b", carga_REM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_carga_REM_exp = carga_REM_expected_prev;
	end
	if (
		( carga_RI_expected_prev !== 1'bx ) && ( carga_RI_prev !== carga_RI_expected_prev )
		&& ((carga_RI_expected_prev !== last_carga_RI_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_RI :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_RI_expected_prev);
		$display ("     Real value = %b", carga_RI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_carga_RI_exp = carga_RI_expected_prev;
	end
	if (
		( goto_t0_expected_prev !== 1'bx ) && ( goto_t0_prev !== goto_t0_expected_prev )
		&& ((goto_t0_expected_prev !== last_goto_t0_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port goto_t0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", goto_t0_expected_prev);
		$display ("     Real value = %b", goto_t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_goto_t0_exp = goto_t0_expected_prev;
	end
	if (
		( HLT_expected_prev !== 1'bx ) && ( HLT_prev !== HLT_expected_prev )
		&& ((HLT_expected_prev !== last_HLT_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HLT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HLT_expected_prev);
		$display ("     Real value = %b", HLT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_HLT_exp = HLT_expected_prev;
	end
	if (
		( incrementa_PC_expected_prev !== 1'bx ) && ( incrementa_PC_prev !== incrementa_PC_expected_prev )
		&& ((incrementa_PC_expected_prev !== last_incrementa_PC_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port incrementa_PC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", incrementa_PC_expected_prev);
		$display ("     Real value = %b", incrementa_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_incrementa_PC_exp = incrementa_PC_expected_prev;
	end
	if (
		( JMP_expected_prev !== 1'bx ) && ( JMP_prev !== JMP_expected_prev )
		&& ((JMP_expected_prev !== last_JMP_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JMP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JMP_expected_prev);
		$display ("     Real value = %b", JMP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_JMP_exp = JMP_expected_prev;
	end
	if (
		( JN_expected_prev !== 1'bx ) && ( JN_prev !== JN_expected_prev )
		&& ((JN_expected_prev !== last_JN_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JN_expected_prev);
		$display ("     Real value = %b", JN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_JN_exp = JN_expected_prev;
	end
	if (
		( JZ_expected_prev !== 1'bx ) && ( JZ_prev !== JZ_expected_prev )
		&& ((JZ_expected_prev !== last_JZ_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JZ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JZ_expected_prev);
		$display ("     Real value = %b", JZ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_JZ_exp = JZ_expected_prev;
	end
	if (
		( LDA_expected_prev !== 1'bx ) && ( LDA_prev !== LDA_expected_prev )
		&& ((LDA_expected_prev !== last_LDA_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LDA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LDA_expected_prev);
		$display ("     Real value = %b", LDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LDA_exp = LDA_expected_prev;
	end
	if (
		( N_expected_prev !== 1'bx ) && ( N_prev !== N_expected_prev )
		&& ((N_expected_prev !== last_N_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_N_exp = N_expected_prev;
	end
	if (
		( NOP_expected_prev !== 1'bx ) && ( NOP_prev !== NOP_expected_prev )
		&& ((NOP_expected_prev !== last_NOP_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NOP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NOP_expected_prev);
		$display ("     Real value = %b", NOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_NOP_exp = NOP_expected_prev;
	end
	if (
		( NOT_expected_prev !== 1'bx ) && ( NOT_prev !== NOT_expected_prev )
		&& ((NOT_expected_prev !== last_NOT_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NOT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NOT_expected_prev);
		$display ("     Real value = %b", NOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_NOT_exp = NOT_expected_prev;
	end
	if (
		( OR_expected_prev !== 1'bx ) && ( OR_prev !== OR_expected_prev )
		&& ((OR_expected_prev !== last_OR_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OR_expected_prev);
		$display ("     Real value = %b", OR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_OR_exp = OR_expected_prev;
	end
	if (
		( PC_out_expected_prev[0] !== 1'bx ) && ( PC_out_prev[0] !== PC_out_expected_prev[0] )
		&& ((PC_out_expected_prev[0] !== last_PC_out_exp[0]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_PC_out_exp[0] = PC_out_expected_prev[0];
	end
	if (
		( PC_out_expected_prev[1] !== 1'bx ) && ( PC_out_prev[1] !== PC_out_expected_prev[1] )
		&& ((PC_out_expected_prev[1] !== last_PC_out_exp[1]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_PC_out_exp[1] = PC_out_expected_prev[1];
	end
	if (
		( PC_out_expected_prev[2] !== 1'bx ) && ( PC_out_prev[2] !== PC_out_expected_prev[2] )
		&& ((PC_out_expected_prev[2] !== last_PC_out_exp[2]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_PC_out_exp[2] = PC_out_expected_prev[2];
	end
	if (
		( PC_out_expected_prev[3] !== 1'bx ) && ( PC_out_prev[3] !== PC_out_expected_prev[3] )
		&& ((PC_out_expected_prev[3] !== last_PC_out_exp[3]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_PC_out_exp[3] = PC_out_expected_prev[3];
	end
	if (
		( PC_out_expected_prev[4] !== 1'bx ) && ( PC_out_prev[4] !== PC_out_expected_prev[4] )
		&& ((PC_out_expected_prev[4] !== last_PC_out_exp[4]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_PC_out_exp[4] = PC_out_expected_prev[4];
	end
	if (
		( PC_out_expected_prev[5] !== 1'bx ) && ( PC_out_prev[5] !== PC_out_expected_prev[5] )
		&& ((PC_out_expected_prev[5] !== last_PC_out_exp[5]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_PC_out_exp[5] = PC_out_expected_prev[5];
	end
	if (
		( PC_out_expected_prev[6] !== 1'bx ) && ( PC_out_prev[6] !== PC_out_expected_prev[6] )
		&& ((PC_out_expected_prev[6] !== last_PC_out_exp[6]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_PC_out_exp[6] = PC_out_expected_prev[6];
	end
	if (
		( PC_out_expected_prev[7] !== 1'bx ) && ( PC_out_prev[7] !== PC_out_expected_prev[7] )
		&& ((PC_out_expected_prev[7] !== last_PC_out_exp[7]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_PC_out_exp[7] = PC_out_expected_prev[7];
	end
	if (
		( RDM_out_expected_prev[0] !== 1'bx ) && ( RDM_out_prev[0] !== RDM_out_expected_prev[0] )
		&& ((RDM_out_expected_prev[0] !== last_RDM_out_exp[0]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_expected_prev);
		$display ("     Real value = %b", RDM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_RDM_out_exp[0] = RDM_out_expected_prev[0];
	end
	if (
		( RDM_out_expected_prev[1] !== 1'bx ) && ( RDM_out_prev[1] !== RDM_out_expected_prev[1] )
		&& ((RDM_out_expected_prev[1] !== last_RDM_out_exp[1]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_expected_prev);
		$display ("     Real value = %b", RDM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_RDM_out_exp[1] = RDM_out_expected_prev[1];
	end
	if (
		( RDM_out_expected_prev[2] !== 1'bx ) && ( RDM_out_prev[2] !== RDM_out_expected_prev[2] )
		&& ((RDM_out_expected_prev[2] !== last_RDM_out_exp[2]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_expected_prev);
		$display ("     Real value = %b", RDM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_RDM_out_exp[2] = RDM_out_expected_prev[2];
	end
	if (
		( RDM_out_expected_prev[3] !== 1'bx ) && ( RDM_out_prev[3] !== RDM_out_expected_prev[3] )
		&& ((RDM_out_expected_prev[3] !== last_RDM_out_exp[3]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_expected_prev);
		$display ("     Real value = %b", RDM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_RDM_out_exp[3] = RDM_out_expected_prev[3];
	end
	if (
		( RDM_out_expected_prev[4] !== 1'bx ) && ( RDM_out_prev[4] !== RDM_out_expected_prev[4] )
		&& ((RDM_out_expected_prev[4] !== last_RDM_out_exp[4]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_expected_prev);
		$display ("     Real value = %b", RDM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_RDM_out_exp[4] = RDM_out_expected_prev[4];
	end
	if (
		( RDM_out_expected_prev[5] !== 1'bx ) && ( RDM_out_prev[5] !== RDM_out_expected_prev[5] )
		&& ((RDM_out_expected_prev[5] !== last_RDM_out_exp[5]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_expected_prev);
		$display ("     Real value = %b", RDM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_RDM_out_exp[5] = RDM_out_expected_prev[5];
	end
	if (
		( RDM_out_expected_prev[6] !== 1'bx ) && ( RDM_out_prev[6] !== RDM_out_expected_prev[6] )
		&& ((RDM_out_expected_prev[6] !== last_RDM_out_exp[6]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_expected_prev);
		$display ("     Real value = %b", RDM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_RDM_out_exp[6] = RDM_out_expected_prev[6];
	end
	if (
		( RDM_out_expected_prev[7] !== 1'bx ) && ( RDM_out_prev[7] !== RDM_out_expected_prev[7] )
		&& ((RDM_out_expected_prev[7] !== last_RDM_out_exp[7]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_expected_prev);
		$display ("     Real value = %b", RDM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_RDM_out_exp[7] = RDM_out_expected_prev[7];
	end
	if (
		( read_expected_prev !== 1'bx ) && ( read_prev !== read_expected_prev )
		&& ((read_expected_prev !== last_read_exp) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_expected_prev);
		$display ("     Real value = %b", read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_read_exp = read_expected_prev;
	end
	if (
		( ROM_out_expected_prev[0] !== 1'bx ) && ( ROM_out_prev[0] !== ROM_out_expected_prev[0] )
		&& ((ROM_out_expected_prev[0] !== last_ROM_out_exp[0]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_out_expected_prev);
		$display ("     Real value = %b", ROM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_ROM_out_exp[0] = ROM_out_expected_prev[0];
	end
	if (
		( ROM_out_expected_prev[1] !== 1'bx ) && ( ROM_out_prev[1] !== ROM_out_expected_prev[1] )
		&& ((ROM_out_expected_prev[1] !== last_ROM_out_exp[1]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_out_expected_prev);
		$display ("     Real value = %b", ROM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_ROM_out_exp[1] = ROM_out_expected_prev[1];
	end
	if (
		( ROM_out_expected_prev[2] !== 1'bx ) && ( ROM_out_prev[2] !== ROM_out_expected_prev[2] )
		&& ((ROM_out_expected_prev[2] !== last_ROM_out_exp[2]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_out_expected_prev);
		$display ("     Real value = %b", ROM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_ROM_out_exp[2] = ROM_out_expected_prev[2];
	end
	if (
		( ROM_out_expected_prev[3] !== 1'bx ) && ( ROM_out_prev[3] !== ROM_out_expected_prev[3] )
		&& ((ROM_out_expected_prev[3] !== last_ROM_out_exp[3]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_out_expected_prev);
		$display ("     Real value = %b", ROM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_ROM_out_exp[3] = ROM_out_expected_prev[3];
	end
	if (
		( ROM_out_expected_prev[4] !== 1'bx ) && ( ROM_out_prev[4] !== ROM_out_expected_prev[4] )
		&& ((ROM_out_expected_prev[4] !== last_ROM_out_exp[4]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_out_expected_prev);
		$display ("     Real value = %b", ROM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_ROM_out_exp[4] = ROM_out_expected_prev[4];
	end
	if (
		( ROM_out_expected_prev[5] !== 1'bx ) && ( ROM_out_prev[5] !== ROM_out_expected_prev[5] )
		&& ((ROM_out_expected_prev[5] !== last_ROM_out_exp[5]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_out_expected_prev);
		$display ("     Real value = %b", ROM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_ROM_out_exp[5] = ROM_out_expected_prev[5];
	end
	if (
		( ROM_out_expected_prev[6] !== 1'bx ) && ( ROM_out_prev[6] !== ROM_out_expected_prev[6] )
		&& ((ROM_out_expected_prev[6] !== last_ROM_out_exp[6]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_out_expected_prev);
		$display ("     Real value = %b", ROM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_ROM_out_exp[6] = ROM_out_expected_prev[6];
	end
	if (
		( ROM_out_expected_prev[7] !== 1'bx ) && ( ROM_out_prev[7] !== ROM_out_expected_prev[7] )
		&& ((ROM_out_expected_prev[7] !== last_ROM_out_exp[7]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_out_expected_prev);
		$display ("     Real value = %b", ROM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_ROM_out_exp[7] = ROM_out_expected_prev[7];
	end
	if (
		( sel_expected_prev !== 1'bx ) && ( sel_prev !== sel_expected_prev )
		&& ((sel_expected_prev !== last_sel_exp) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_sel_exp = sel_expected_prev;
	end
	if (
		( STA_expected_prev !== 1'bx ) && ( STA_prev !== STA_expected_prev )
		&& ((STA_expected_prev !== last_STA_exp) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STA_expected_prev);
		$display ("     Real value = %b", STA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_STA_exp = STA_expected_prev;
	end
	if (
		( ULA_out_expected_prev[0] !== 1'bx ) && ( ULA_out_prev[0] !== ULA_out_expected_prev[0] )
		&& ((ULA_out_expected_prev[0] !== last_ULA_out_exp[0]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_out_expected_prev);
		$display ("     Real value = %b", ULA_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_ULA_out_exp[0] = ULA_out_expected_prev[0];
	end
	if (
		( ULA_out_expected_prev[1] !== 1'bx ) && ( ULA_out_prev[1] !== ULA_out_expected_prev[1] )
		&& ((ULA_out_expected_prev[1] !== last_ULA_out_exp[1]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_out_expected_prev);
		$display ("     Real value = %b", ULA_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_ULA_out_exp[1] = ULA_out_expected_prev[1];
	end
	if (
		( ULA_out_expected_prev[2] !== 1'bx ) && ( ULA_out_prev[2] !== ULA_out_expected_prev[2] )
		&& ((ULA_out_expected_prev[2] !== last_ULA_out_exp[2]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_out_expected_prev);
		$display ("     Real value = %b", ULA_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_ULA_out_exp[2] = ULA_out_expected_prev[2];
	end
	if (
		( ULA_out_expected_prev[3] !== 1'bx ) && ( ULA_out_prev[3] !== ULA_out_expected_prev[3] )
		&& ((ULA_out_expected_prev[3] !== last_ULA_out_exp[3]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_out_expected_prev);
		$display ("     Real value = %b", ULA_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_ULA_out_exp[3] = ULA_out_expected_prev[3];
	end
	if (
		( ULA_out_expected_prev[4] !== 1'bx ) && ( ULA_out_prev[4] !== ULA_out_expected_prev[4] )
		&& ((ULA_out_expected_prev[4] !== last_ULA_out_exp[4]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_out_expected_prev);
		$display ("     Real value = %b", ULA_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_ULA_out_exp[4] = ULA_out_expected_prev[4];
	end
	if (
		( ULA_out_expected_prev[5] !== 1'bx ) && ( ULA_out_prev[5] !== ULA_out_expected_prev[5] )
		&& ((ULA_out_expected_prev[5] !== last_ULA_out_exp[5]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_out_expected_prev);
		$display ("     Real value = %b", ULA_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_ULA_out_exp[5] = ULA_out_expected_prev[5];
	end
	if (
		( ULA_out_expected_prev[6] !== 1'bx ) && ( ULA_out_prev[6] !== ULA_out_expected_prev[6] )
		&& ((ULA_out_expected_prev[6] !== last_ULA_out_exp[6]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_out_expected_prev);
		$display ("     Real value = %b", ULA_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_ULA_out_exp[6] = ULA_out_expected_prev[6];
	end
	if (
		( ULA_out_expected_prev[7] !== 1'bx ) && ( ULA_out_prev[7] !== ULA_out_expected_prev[7] )
		&& ((ULA_out_expected_prev[7] !== last_ULA_out_exp[7]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_out_expected_prev);
		$display ("     Real value = %b", ULA_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_ULA_out_exp[7] = ULA_out_expected_prev[7];
	end
	if (
		( ULAADD_expected_prev !== 1'bx ) && ( ULAADD_prev !== ULAADD_expected_prev )
		&& ((ULAADD_expected_prev !== last_ULAADD_exp) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAADD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAADD_expected_prev);
		$display ("     Real value = %b", ULAADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULAADD_exp = ULAADD_expected_prev;
	end
	if (
		( ULAAND_expected_prev !== 1'bx ) && ( ULAAND_prev !== ULAAND_expected_prev )
		&& ((ULAAND_expected_prev !== last_ULAAND_exp) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAAND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAAND_expected_prev);
		$display ("     Real value = %b", ULAAND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ULAAND_exp = ULAAND_expected_prev;
	end
	if (
		( ULANOT_expected_prev !== 1'bx ) && ( ULANOT_prev !== ULANOT_expected_prev )
		&& ((ULANOT_expected_prev !== last_ULANOT_exp) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULANOT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULANOT_expected_prev);
		$display ("     Real value = %b", ULANOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ULANOT_exp = ULANOT_expected_prev;
	end
	if (
		( ULAOR_expected_prev !== 1'bx ) && ( ULAOR_prev !== ULAOR_expected_prev )
		&& ((ULAOR_expected_prev !== last_ULAOR_exp) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAOR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAOR_expected_prev);
		$display ("     Real value = %b", ULAOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_ULAOR_exp = ULAOR_expected_prev;
	end
	if (
		( ULAy_expected_prev !== 1'bx ) && ( ULAy_prev !== ULAy_expected_prev )
		&& ((ULAy_expected_prev !== last_ULAy_exp) ||
			on_first_change[36])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAy :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAy_expected_prev);
		$display ("     Real value = %b", ULAy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[36] = 1'b0;
		last_ULAy_exp = ULAy_expected_prev;
	end
	if (
		( write_expected_prev !== 1'bx ) && ( write_prev !== write_expected_prev )
		&& ((write_expected_prev !== last_write_exp) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_expected_prev);
		$display ("     Real value = %b", write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_write_exp = write_expected_prev;
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[38])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[38] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module Projeto_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clk_in;
reg res;
reg run_step;
reg step;
// wires                                               
wire [7:0] AC;
wire [6:0] ACdisplay0;
wire [6:0] ACdisplay1;
wire ADD;
wire AND;
wire carga_AC;
wire carga_NZ;
wire carga_PC;
wire carga_RDM;
wire carga_REM;
wire carga_RI;
wire goto_t0;
wire HLT;
wire incrementa_PC;
wire JMP;
wire JN;
wire JZ;
wire LDA;
wire N;
wire NOP;
wire NOT;
wire OR;
wire [7:0] PC_out;
wire [6:0] PCdisplay0;
wire [6:0] PCdisplay1;
wire [7:0] RDM_out;
wire read;
wire [7:0] ROM_out;
wire sel;
wire STA;
wire [7:0] ULA_out;
wire ULAADD;
wire ULAAND;
wire ULANOT;
wire ULAOR;
wire ULAy;
wire write;
wire Z;

wire sampler;                             

// assign statements (if any)                          
Projeto i1 (
// port map - connection between master ports and signals/registers   
	.AC(AC),
	.ACdisplay0(ACdisplay0),
	.ACdisplay1(ACdisplay1),
	.ADD(ADD),
	.\AND (AND),
	.carga_AC(carga_AC),
	.carga_NZ(carga_NZ),
	.carga_PC(carga_PC),
	.carga_RDM(carga_RDM),
	.carga_REM(carga_REM),
	.carga_RI(carga_RI),
	.clk(clk),
	.clk_in(clk_in),
	.goto_t0(goto_t0),
	.HLT(HLT),
	.incrementa_PC(incrementa_PC),
	.JMP(JMP),
	.JN(JN),
	.JZ(JZ),
	.LDA(LDA),
	.N(N),
	.NOP(NOP),
	.\NOT (NOT),
	.\OR (OR),
	.PC_out(PC_out),
	.PCdisplay0(PCdisplay0),
	.PCdisplay1(PCdisplay1),
	.RDM_out(RDM_out),
	.read(read),
	.res(res),
	.ROM_out(ROM_out),
	.run_step(run_step),
	.sel(sel),
	.STA(STA),
	.step(step),
	.ULA_out(ULA_out),
	.ULAADD(ULAADD),
	.ULAAND(ULAAND),
	.ULANOT(ULANOT),
	.ULAOR(ULAOR),
	.ULAy(ULAy),
	.write(write),
	.Z(Z)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// res
initial
begin
	res = 1'b1;
end 

Projeto_vlg_sample_tst tb_sample (
	.clk(clk),
	.clk_in(clk_in),
	.res(res),
	.run_step(run_step),
	.step(step),
	.sampler_tx(sampler)
);

Projeto_vlg_check_tst tb_out(
	.AC(AC),
	.ACdisplay0(ACdisplay0),
	.ACdisplay1(ACdisplay1),
	.ADD(ADD),
	.AND(AND),
	.carga_AC(carga_AC),
	.carga_NZ(carga_NZ),
	.carga_PC(carga_PC),
	.carga_RDM(carga_RDM),
	.carga_REM(carga_REM),
	.carga_RI(carga_RI),
	.goto_t0(goto_t0),
	.HLT(HLT),
	.incrementa_PC(incrementa_PC),
	.JMP(JMP),
	.JN(JN),
	.JZ(JZ),
	.LDA(LDA),
	.N(N),
	.NOP(NOP),
	.NOT(NOT),
	.OR(OR),
	.PC_out(PC_out),
	.PCdisplay0(PCdisplay0),
	.PCdisplay1(PCdisplay1),
	.RDM_out(RDM_out),
	.read(read),
	.ROM_out(ROM_out),
	.sel(sel),
	.STA(STA),
	.ULA_out(ULA_out),
	.ULAADD(ULAADD),
	.ULAAND(ULAAND),
	.ULANOT(ULANOT),
	.ULAOR(ULAOR),
	.ULAy(ULAy),
	.write(write),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

